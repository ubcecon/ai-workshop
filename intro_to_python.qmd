---
title: 'Network analysis workshop pre-reading'

date: 2024-08-30
description: This is the prereading for the network analysis workshop.
categories: [python, network analysis]
format: 
  html: default
  ipynb:
    jupyter:
      kernelspec:
        display_name: Python
        language: python3
        name: python3
---

# Network Analysis Workshop Setup

---
## 1. Setting up Python and accessing the network analysis notebook

### 1.1 What is Python? 

***Python*** is a high-level programming language known for its readability and versatility, designed by Guido van Rossum and first released in 1991. A "high level" programming language is one that provides a strong degree of abstraction from the hardware and low-level operations of a computer: high-level programming languages are known for their versatility and ease of use, and are the preferred choice for tasks such as data analysis. Examples include R, Java, and Python.

### 1.2 Installing Python and Anaconda 

Instead of installing python directly, we'll be installing it using anaconda, a package management system for R and Python. A ***package management system*** is a collection of software tools that automate and simplify installing and managing ***libraries***, collections of pre-written code that can be used to perform common tasks without having to write code from scratch. For instance, suppose we wanted to graph the function $y=x^{2}$ in python. Doing so would require installing and importing the `numpy` and `matplotlib` libraries. If we wanted to graph the same function in R, we would download and import the `ggplot2` library. 

#### 1.2.1 Anaconda Installer

We'll be installing a smaller version of anaconda called miniconda. 

- [Press here to install on windows](https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe)
- [Press here to find your installation version for Mac.](https://docs.anaconda.com/miniconda/)

<div class="alert alert-block alert-warning">

⚠️  **For Macs:** It is important to pay attention to the version you download: different processors will require different versions.
- To check your processor, click on the Apple logo in the top-left of your screen, and select “About This Mac”
    - Look for the processor information.
        - if this says something like 3.2 GHz Intel Core i5 or something like x64-based processor choose the macOS Intel x86 64-bit version
        - if this says something like Apple M1 choose the macOS Apple M1 64-bit version
- We recommend choosing the .pkg version of the installer.

</div>

Once you have downloaded the installer, run the installer.

- Make sure you choose a sensible installation location; you can ignore any warnings about spaces in names.
    - Check the following options, if available:
        - Create shortcuts
        - Add Miniconda3 to my PATH environment variable
        - Register Miniconda3 as my default Python 3.10
        - Clear the package cache upon completion.
    - Run the installer, which can take a while.

#### 1.2.2 Creating an Environment 

Once you've installed minconda and followed the installation steps in the installer, open a **miniconda command line window**. 

- On Windows, press the search tab and search `Anaconda prompt`. Right-click on the result and press `run as administrator`. 
- On Mac, click the Launchpad icon in the Dock, type Terminal in the search field, then click “Terminal”. 
    - If this doesn’t work, open the Finder, then open the /Applications/Utilities folder, and finally double-click Terminal.

Once your command prompt is running, enter the following command: 

`conda create -n networks jupyter`

This will create a new ***environment***, a self-contained directory that will contain everything needed to run a specific project. This is particularly important as it prevents package conflicts from arising when working on multiple projects. For instance, if one project requires python 3.8, and another requies python 4.11, we can create one environment which uses python 3.8, and another which uses python 4.11. 

The `conda create -n networks jupyter` command creates a new environment called `networks` which contains the ***jupyter library***, a library for creating and running *jupyter notebooks*, interactive notebooks that contain code, visualizations and text. 

Once the code above has finished running, enter:

`conda activate networks` to *activate* the environment. 

![if the steps above were done correctly, on windows, you should see something like this.](images/image.png)

### 1.2.3 Installing packages

We can now install the packages used in the network_analysis workshop. To do so, run the following commands in your console:

`pip install networkx matplotlib pandas numpy geopandas contextily community`

This will install all the packages required for the notebook. 

### 1.2.4 Accessing the network analysis notebooks 

TBA when we find out where the notebooks will be 

### 1.2.5 Downloading the datasets

For the network analysis workshop, we'll be using the ICRATES database of tablewares in the Roman East. Please follow the link [here](https://archaeologicalnetworks.wordpress.com/) and download the excel files called `Network dataset` and `Locations dataset` under "Network visualisation with The Vistorian".
